# Autogenerated from a Treetop grammar. Edits may be lost.



module DracoonGrammar
  include Treetop::Runtime

  def root
    @root ||= :module
  end

  module Module0
    def header
      elements[2]
    end

  end

  def _nt_module
    start_index = index
    if node_cache[:module].has_key?(index)
      cached = node_cache[:module][index]
      if cached
        node_cache[:module][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      if (match_len = has_terminal?('#module', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('#module')
        r2 = nil
      end
      s1 << r2
      if r2
        s3, i3 = [], index
        loop do
          r4 = _nt_ws
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s1 << r3
        if r3
          r5 = _nt_header
          s1 << r5
          if r5
            s6, i6 = [], index
            loop do
              i7 = index
              r8 = _nt_scene
              if r8
                r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                r7 = r8
              else
                r9 = _nt_item
                if r9
                  r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                  r7 = r9
                else
                  @index = i7
                  r7 = nil
                end
              end
              if r7
                s6 << r7
              else
                break
              end
            end
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            s1 << r6
          end
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Module0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(ModuleNode,input, i0...index, s0)

    node_cache[:module][start_index] = r0

    r0
  end

  module Scene0
    def header
      elements[2]
    end

  end

  def _nt_scene
    start_index = index
    if node_cache[:scene].has_key?(index)
      cached = node_cache[:scene][index]
      if cached
        node_cache[:scene][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('#scene', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('#scene')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_ws
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_header
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_passage
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SceneNode,input, i0...index, s0)
      r0.extend(Scene0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:scene][start_index] = r0

    r0
  end

  module Passage0
    def action
      elements[0]
    end

  end

  module Passage1
    def header
      elements[2]
    end

    def content
      elements[3]
    end

  end

  def _nt_passage
    start_index = index
    if node_cache[:passage].has_key?(index)
      cached = node_cache[:passage][index]
      if cached
        node_cache[:passage][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('#passage', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('#passage')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_ws
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_header
        s0 << r4
        if r4
          r5 = _nt_content
          s0 << r5
          if r5
            s6, i6 = [], index
            loop do
              i7, s7 = index, []
              r8 = _nt_action
              s7 << r8
              if r8
                s9, i9 = [], index
                loop do
                  r10 = _nt_nl
                  if r10
                    s9 << r10
                  else
                    break
                  end
                end
                if s9.empty?
                  @index = i9
                  r9 = nil
                else
                  r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                end
                s7 << r9
              end
              if s7.last
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                r7.extend(Passage0)
              else
                @index = i7
                r7 = nil
              end
              if r7
                s6 << r7
              else
                break
              end
            end
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            s0 << r6
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(PassageNode,input, i0...index, s0)
      r0.extend(Passage1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:passage][start_index] = r0

    r0
  end

  module Item0
    def action
      elements[0]
    end

  end

  module Item1
    def header
      elements[2]
    end

    def content
      elements[3]
    end

  end

  def _nt_item
    start_index = index
    if node_cache[:item].has_key?(index)
      cached = node_cache[:item][index]
      if cached
        node_cache[:item][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('#item', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('#item')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_ws
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_header
        s0 << r4
        if r4
          r5 = _nt_content
          s0 << r5
          if r5
            s6, i6 = [], index
            loop do
              i7, s7 = index, []
              r8 = _nt_action
              s7 << r8
              if r8
                s9, i9 = [], index
                loop do
                  r10 = _nt_nl
                  if r10
                    s9 << r10
                  else
                    break
                  end
                end
                if s9.empty?
                  @index = i9
                  r9 = nil
                else
                  r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                end
                s7 << r9
              end
              if s7.last
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                r7.extend(Item0)
              else
                @index = i7
                r7 = nil
              end
              if r7
                s6 << r7
              else
                break
              end
            end
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            s0 << r6
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(ItemNode,input, i0...index, s0)
      r0.extend(Item1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:item][start_index] = r0

    r0
  end

  module Header0
    def state
      elements[3]
    end

  end

  module Header1
    def summary
      elements[1]
    end
  end

  module Header2
    def scriptWrapper
      elements[1]
    end
  end

  module Header3
    def identifier
      elements[0]
    end

  end

  def _nt_header
    start_index = index
    if node_cache[:header].has_key?(index)
      cached = node_cache[:header][index]
      if cached
        node_cache[:header][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_identifier
    s0 << r1
    if r1
      i3, s3 = index, []
      s4, i4 = [], index
      loop do
        r5 = _nt_ws
        if r5
          s4 << r5
        else
          break
        end
      end
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      s3 << r4
      if r4
        if (match_len = has_terminal?('[', false, index))
          r6 = true
          @index += match_len
        else
          terminal_parse_failure('[')
          r6 = nil
        end
        s3 << r6
        if r6
          s7, i7 = [], index
          loop do
            r8 = _nt_ws
            if r8
              s7 << r8
            else
              break
            end
          end
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          s3 << r7
          if r7
            r9 = _nt_state
            s3 << r9
            if r9
              s10, i10 = [], index
              loop do
                r11 = _nt_ws
                if r11
                  s10 << r11
                else
                  break
                end
              end
              r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
              s3 << r10
              if r10
                if (match_len = has_terminal?(']', false, index))
                  r12 = true
                  @index += match_len
                else
                  terminal_parse_failure(']')
                  r12 = nil
                end
                s3 << r12
              end
            end
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Header0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        i14, s14 = index, []
        s15, i15 = [], index
        loop do
          r16 = _nt_ws
          if r16
            s15 << r16
          else
            break
          end
        end
        if s15.empty?
          @index = i15
          r15 = nil
        else
          r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
        end
        s14 << r15
        if r15
          r17 = _nt_summary
          s14 << r17
        end
        if s14.last
          r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
          r14.extend(Header1)
        else
          @index = i14
          r14 = nil
        end
        if r14
          r13 = r14
        else
          r13 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r13
        if r13
          i19, s19 = index, []
          s20, i20 = [], index
          loop do
            r21 = _nt_wsnl
            if r21
              s20 << r21
            else
              break
            end
          end
          r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
          s19 << r20
          if r20
            r22 = _nt_scriptWrapper
            s19 << r22
          end
          if s19.last
            r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
            r19.extend(Header2)
          else
            @index = i19
            r19 = nil
          end
          if r19
            r18 = r19
          else
            r18 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r18
          if r18
            s23, i23 = [], index
            loop do
              r24 = _nt_nl
              if r24
                s23 << r24
              else
                break
              end
            end
            if s23.empty?
              @index = i23
              r23 = nil
            else
              r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
            end
            s0 << r23
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(HeaderNode,input, i0...index, s0)
      r0.extend(Header3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:header][start_index] = r0

    r0
  end

  module Summary0
  end

  module Summary1
  end

  def _nt_summary
    start_index = index
    if node_cache[:summary].has_key?(index)
      cached = node_cache[:summary][index]
      if cached
        node_cache[:summary][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_word
    if r2
      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
      r1 = r2
    else
      r3 = _nt_punctuation
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      s4, i4 = [], index
      loop do
        i5, s5 = index, []
        s6, i6 = [], index
        loop do
          r7 = _nt_ws
          if r7
            s6 << r7
          else
            break
          end
        end
        if s6.empty?
          @index = i6
          r6 = nil
        else
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        end
        s5 << r6
        if r6
          i8 = index
          r9 = _nt_word
          if r9
            r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
            r8 = r9
          else
            r10 = _nt_punctuation
            if r10
              r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
              r8 = r10
            else
              @index = i8
              r8 = nil
            end
          end
          s5 << r8
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(Summary0)
        else
          @index = i5
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SummaryNode,input, i0...index, s0)
      r0.extend(Summary1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:summary][start_index] = r0

    r0
  end

  def _nt_content
    start_index = index
    if node_cache[:content].has_key?(index)
      cached = node_cache[:content][index]
      if cached
        node_cache[:content][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_word
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        r3 = _nt_punctuation
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          r4 = _nt_inlineTag
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r1 = r4
          else
            r5 = _nt_logicTag
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r1 = r5
            else
              r6 = _nt_link
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r1 = r6
              else
                r7 = _nt_endp
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r1 = r7
                else
                  r8 = _nt_nl
                  if r8
                    r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                    r1 = r8
                  else
                    r9 = _nt_ws
                    if r9
                      r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                      r1 = r9
                    else
                      @index = i1
                      r1 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(ContentNode,input, i0...index, s0)

    node_cache[:content][start_index] = r0

    r0
  end

  module Link0
    def word
      elements[1]
    end
  end

  module Link1
    def keyword
      elements[3]
    end
  end

  module Link2
  end

  def _nt_link
    start_index = index
    if node_cache[:link].has_key?(index)
      cached = node_cache[:link][index]
      if cached
        node_cache[:link][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('[', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        s4, i4 = [], index
        loop do
          r5 = _nt_ws
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s3 << r4
        if r4
          r6 = _nt_word
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Link0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        i8, s8 = index, []
        s9, i9 = [], index
        loop do
          r10 = _nt_ws
          if r10
            s9 << r10
          else
            break
          end
        end
        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        s8 << r9
        if r9
          if (match_len = has_terminal?('|', false, index))
            r11 = true
            @index += match_len
          else
            terminal_parse_failure('|')
            r11 = nil
          end
          s8 << r11
          if r11
            s12, i12 = [], index
            loop do
              r13 = _nt_ws
              if r13
                s12 << r13
              else
                break
              end
            end
            r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
            s8 << r12
            if r12
              r14 = _nt_keyword
              s8 << r14
            end
          end
        end
        if s8.last
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          r8.extend(Link1)
        else
          @index = i8
          r8 = nil
        end
        if r8
          r7 = r8
        else
          r7 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r7
        if r7
          s15, i15 = [], index
          loop do
            r16 = _nt_ws
            if r16
              s15 << r16
            else
              break
            end
          end
          r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
          s0 << r15
          if r15
            if (match_len = has_terminal?(']', false, index))
              r17 = true
              @index += match_len
            else
              terminal_parse_failure(']')
              r17 = nil
            end
            s0 << r17
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(LinkNode,input, i0...index, s0)
      r0.extend(Link2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:link][start_index] = r0

    r0
  end

  module Action0
    def keyword
      elements[2]
    end

    def scriptWrapper
      elements[4]
    end

  end

  def _nt_action
    start_index = index
    if node_cache[:action].has_key?(index)
      cached = node_cache[:action][index]
      if cached
        node_cache[:action][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('[', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_ws
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_keyword
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_ws
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_scriptWrapper
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_ws
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                if (match_len = has_terminal?(']', false, index))
                  r10 = true
                  @index += match_len
                else
                  terminal_parse_failure(']')
                  r10 = nil
                end
                s0 << r10
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(ActionNode,input, i0...index, s0)
      r0.extend(Action0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:action][start_index] = r0

    r0
  end

  module ScriptWrapper0
    def script
      elements[2]
    end

  end

  def _nt_scriptWrapper
    start_index = index
    if node_cache[:scriptWrapper].has_key?(index)
      cached = node_cache[:scriptWrapper][index]
      if cached
        node_cache[:scriptWrapper][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('<%', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('<%')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_wsnl
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_script
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_wsnl
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            if (match_len = has_terminal?('%>', false, index))
              r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('%>')
              r7 = nil
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ScriptWrapper0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:scriptWrapper][start_index] = r0

    r0
  end

  module Script0
  end

  module Script1
  end

  def _nt_script
    start_index = index
    if node_cache[:script].has_key?(index)
      cached = node_cache[:script][index]
      if cached
        node_cache[:script][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      i2 = index
      i3, s3 = index, []
      s4, i4 = [], index
      loop do
        r5 = _nt_wsnl
        if r5
          s4 << r5
        else
          break
        end
      end
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      s3 << r4
      if r4
        if (match_len = has_terminal?('%>', false, index))
          r6 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('%>')
          r6 = nil
        end
        s3 << r6
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Script0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if index < input_length
          r7 = true
          @index += 1
        else
          terminal_parse_failure("any character")
          r7 = nil
        end
        s1 << r7
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Script1)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(ScriptNode,input, i0...index, s0)

    node_cache[:script][start_index] = r0

    r0
  end

  module InlineTag0
    def script
      elements[2]
    end

  end

  def _nt_inlineTag
    start_index = index
    if node_cache[:inlineTag].has_key?(index)
      cached = node_cache[:inlineTag][index]
      if cached
        node_cache[:inlineTag][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('<%=', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('<%=')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_wsnl
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_script
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_wsnl
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            if (match_len = has_terminal?('%>', false, index))
              r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('%>')
              r7 = nil
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(InlineTagNode,input, i0...index, s0)
      r0.extend(InlineTag0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:inlineTag][start_index] = r0

    r0
  end

  def _nt_logicTag
    start_index = index
    if node_cache[:logicTag].has_key?(index)
      cached = node_cache[:logicTag][index]
      if cached
        node_cache[:logicTag][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_ifTag
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_scriptTag
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:logicTag][start_index] = r0

    r0
  end

  module IfTag0
    def condition
      elements[4]
    end

    def content
      elements[6]
    end

  end

  module IfTag1
    def content
      elements[2]
    end

  end

  module IfTag2
    def condition
      elements[4]
    end

    def content
      elements[6]
    end

  end

  def _nt_ifTag
    start_index = index
    if node_cache[:ifTag].has_key?(index)
      cached = node_cache[:ifTag][index]
      if cached
        node_cache[:ifTag][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('{{', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('{{')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_wsnl
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('if', false, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('if')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_wsnl
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          s0 << r5
          if r5
            r7 = _nt_condition
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_wsnl
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                r10 = _nt_content
                s0 << r10
                if r10
                  s11, i11 = [], index
                  loop do
                    r12 = _nt_wsnl
                    if r12
                      s11 << r12
                    else
                      break
                    end
                  end
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  s0 << r11
                  if r11
                    s13, i13 = [], index
                    loop do
                      i14, s14 = index, []
                      if (match_len = has_terminal?('|', false, index))
                        r15 = true
                        @index += match_len
                      else
                        terminal_parse_failure('|')
                        r15 = nil
                      end
                      s14 << r15
                      if r15
                        s16, i16 = [], index
                        loop do
                          r17 = _nt_wsnl
                          if r17
                            s16 << r17
                          else
                            break
                          end
                        end
                        r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                        s14 << r16
                        if r16
                          if (match_len = has_terminal?('if', false, index))
                            r18 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('if')
                            r18 = nil
                          end
                          s14 << r18
                          if r18
                            s19, i19 = [], index
                            loop do
                              r20 = _nt_wsnl
                              if r20
                                s19 << r20
                              else
                                break
                              end
                            end
                            if s19.empty?
                              @index = i19
                              r19 = nil
                            else
                              r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                            end
                            s14 << r19
                            if r19
                              r21 = _nt_condition
                              s14 << r21
                              if r21
                                s22, i22 = [], index
                                loop do
                                  r23 = _nt_wsnl
                                  if r23
                                    s22 << r23
                                  else
                                    break
                                  end
                                end
                                r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                                s14 << r22
                                if r22
                                  r24 = _nt_content
                                  s14 << r24
                                  if r24
                                    s25, i25 = [], index
                                    loop do
                                      r26 = _nt_wsnl
                                      if r26
                                        s25 << r26
                                      else
                                        break
                                      end
                                    end
                                    r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
                                    s14 << r25
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                      if s14.last
                        r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                        r14.extend(IfTag0)
                      else
                        @index = i14
                        r14 = nil
                      end
                      if r14
                        s13 << r14
                      else
                        break
                      end
                    end
                    r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                    s0 << r13
                    if r13
                      i28, s28 = index, []
                      if (match_len = has_terminal?('|', false, index))
                        r29 = true
                        @index += match_len
                      else
                        terminal_parse_failure('|')
                        r29 = nil
                      end
                      s28 << r29
                      if r29
                        s30, i30 = [], index
                        loop do
                          r31 = _nt_wsnl
                          if r31
                            s30 << r31
                          else
                            break
                          end
                        end
                        r30 = instantiate_node(SyntaxNode,input, i30...index, s30)
                        s28 << r30
                        if r30
                          r32 = _nt_content
                          s28 << r32
                          if r32
                            s33, i33 = [], index
                            loop do
                              r34 = _nt_wsnl
                              if r34
                                s33 << r34
                              else
                                break
                              end
                            end
                            r33 = instantiate_node(SyntaxNode,input, i33...index, s33)
                            s28 << r33
                          end
                        end
                      end
                      if s28.last
                        r28 = instantiate_node(SyntaxNode,input, i28...index, s28)
                        r28.extend(IfTag1)
                      else
                        @index = i28
                        r28 = nil
                      end
                      if r28
                        r27 = r28
                      else
                        r27 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s0 << r27
                      if r27
                        if (match_len = has_terminal?('}}', false, index))
                          r35 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('}}')
                          r35 = nil
                        end
                        s0 << r35
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(IfTagNode,input, i0...index, s0)
      r0.extend(IfTag2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ifTag][start_index] = r0

    r0
  end

  module Condition0
    def jsExpr
      elements[0]
    end

  end

  def _nt_condition
    start_index = index
    if node_cache[:condition].has_key?(index)
      cached = node_cache[:condition][index]
      if cached
        node_cache[:condition][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_jsExpr
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_wsnl
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?(':', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure(':')
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Condition0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:condition][start_index] = r0

    r0
  end

  module ScriptTag0
    def scriptWrapper
      elements[4]
    end

  end

  def _nt_scriptTag
    start_index = index
    if node_cache[:scriptTag].has_key?(index)
      cached = node_cache[:scriptTag][index]
      if cached
        node_cache[:scriptTag][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('{{', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('{{')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_ws
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('script', false, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('script')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_ws
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_scriptWrapper
            s0 << r7
            if r7
              if (match_len = has_terminal?('}}', false, index))
                r8 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('}}')
                r8 = nil
              end
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(ScriptTagNode,input, i0...index, s0)
      r0.extend(ScriptTag0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:scriptTag][start_index] = r0

    r0
  end

  module JsExpr0
  end

  module JsExpr1
  end

  def _nt_jsExpr
    start_index = index
    if node_cache[:jsExpr].has_key?(index)
      cached = node_cache[:jsExpr][index]
      if cached
        node_cache[:jsExpr][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      i2 = index
      i3, s3 = index, []
      s4, i4 = [], index
      loop do
        r5 = _nt_wsnl
        if r5
          s4 << r5
        else
          break
        end
      end
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      s3 << r4
      if r4
        if (match_len = has_terminal?(':', false, index))
          r6 = true
          @index += match_len
        else
          terminal_parse_failure(':')
          r6 = nil
        end
        s3 << r6
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(JsExpr0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if index < input_length
          r7 = true
          @index += 1
        else
          terminal_parse_failure("any character")
          r7 = nil
        end
        s1 << r7
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(JsExpr1)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(JSExprNode,input, i0...index, s0)

    node_cache[:jsExpr][start_index] = r0

    r0
  end

  def _nt_identifier
    start_index = index
    if node_cache[:identifier].has_key?(index)
      cached = node_cache[:identifier][index]
      if cached
        node_cache[:identifier][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[a-zA-Z0-9_]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(IdentifierNode,input, i0...index, s0)
    end

    node_cache[:identifier][start_index] = r0

    r0
  end

  def _nt_state
    start_index = index
    if node_cache[:state].has_key?(index)
      cached = node_cache[:state][index]
      if cached
        node_cache[:state][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[a-zA-Z0-9_]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(StateNode,input, i0...index, s0)
    end

    node_cache[:state][start_index] = r0

    r0
  end

  module String0
  end

  module String1
  end

  def _nt_string
    start_index = index
    if node_cache[:string].has_key?(index)
      cached = node_cache[:string][index]
      if cached
        node_cache[:string][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('"', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        if (match_len = has_terminal?('\"', false, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\"')
          r4 = nil
        end
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r3 = r4
        else
          i5, s5 = index, []
          i6 = index
          if (match_len = has_terminal?('"', false, index))
            r7 = true
            @index += match_len
          else
            terminal_parse_failure('"')
            r7 = nil
          end
          if r7
            r6 = nil
          else
            @index = i6
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r6
          if r6
            if index < input_length
              r8 = true
              @index += 1
            else
              terminal_parse_failure("any character")
              r8 = nil
            end
            s5 << r8
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(String0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('"', false, index))
          r9 = true
          @index += match_len
        else
          terminal_parse_failure('"')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = instantiate_node(StringNode,input, i0...index, s0)
      r0.extend(String1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string][start_index] = r0

    r0
  end

  module Keyword0
  end

  def _nt_keyword
    start_index = index
    if node_cache[:keyword].has_key?(index)
      cached = node_cache[:keyword][index]
      if cached
        node_cache[:keyword][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(@regexps[gr = '\A[a-zA-Z_]'] ||= Regexp.new(gr), :regexp, index)
      r1 = true
      @index += 1
    else
      terminal_parse_failure('[a-zA-Z_]')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[a-zA-Z0-9_]')
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(KeywordNode,input, i0...index, s0)
      r0.extend(Keyword0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:keyword][start_index] = r0

    r0
  end

  module Number0
  end

  module Number1
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        node_cache[:number][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
        r2 = true
        @index += 1
      else
        terminal_parse_failure('[0-9]')
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      i4, s4 = index, []
      if (match_len = has_terminal?('.', false, index))
        r5 = true
        @index += match_len
      else
        terminal_parse_failure('.')
        r5 = nil
      end
      s4 << r5
      if r5
        s6, i6 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
            r7 = true
            @index += 1
          else
            terminal_parse_failure('[0-9]')
            r7 = nil
          end
          if r7
            s6 << r7
          else
            break
          end
        end
        if s6.empty?
          @index = i6
          r6 = nil
        else
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        end
        s4 << r6
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(Number0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(NumberNode,input, i0...index, s0)
      r0.extend(Number1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:number][start_index] = r0

    r0
  end

  def _nt_word
    start_index = index
    if node_cache[:word].has_key?(index)
      cached = node_cache[:word][index]
      if cached
        node_cache[:word][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[a-zñáéíóúüA-ZÑÁÉÍÓÚÜ0-9_]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[a-zñáéíóúüA-ZÑÁÉÍÓÚÜ0-9_]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(WordNode,input, i0...index, s0)
    end

    node_cache[:word][start_index] = r0

    r0
  end

  module Endp0
    def nl
      elements[0]
    end

  end

  def _nt_endp
    start_index = index
    if node_cache[:endp].has_key?(index)
      cached = node_cache[:endp][index]
      if cached
        node_cache[:endp][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_nl
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_nl
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(EndParagraphNode,input, i0...index, s0)
      r0.extend(Endp0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:endp][start_index] = r0

    r0
  end

  def _nt_punctuation
    start_index = index
    if node_cache[:punctuation].has_key?(index)
      cached = node_cache[:punctuation][index]
      if cached
        node_cache[:punctuation][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?(':', false, index))
      r1 = instantiate_node(PunctuationNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure(':')
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?(';', false, index))
        r2 = instantiate_node(PunctuationNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure(';')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?('.', false, index))
          r3 = instantiate_node(PunctuationNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('.')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          if (match_len = has_terminal?(',', false, index))
            r4 = instantiate_node(PunctuationNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure(',')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            if (match_len = has_terminal?('(', false, index))
              r5 = instantiate_node(PunctuationNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('(')
              r5 = nil
            end
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              if (match_len = has_terminal?(')', false, index))
                r6 = instantiate_node(PunctuationNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure(')')
                r6 = nil
              end
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r0 = r6
              else
                if (match_len = has_terminal?("'", false, index))
                  r7 = instantiate_node(PunctuationNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure("'")
                  r7 = nil
                end
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r0 = r7
                else
                  if (match_len = has_terminal?("?", false, index))
                    r8 = instantiate_node(PunctuationNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure("?")
                    r8 = nil
                  end
                  if r8
                    r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                    r0 = r8
                  else
                    if (match_len = has_terminal?("!", false, index))
                      r9 = instantiate_node(PunctuationNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure("!")
                      r9 = nil
                    end
                    if r9
                      r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                      r0 = r9
                    else
                      if (match_len = has_terminal?('--', false, index))
                        r10 = instantiate_node(PunctuationNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('--')
                        r10 = nil
                      end
                      if r10
                        r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                        r0 = r10
                      else
                        @index = i0
                        r0 = nil
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:punctuation][start_index] = r0

    r0
  end

  def _nt_wsnl
    start_index = index
    if node_cache[:wsnl].has_key?(index)
      cached = node_cache[:wsnl][index]
      if cached
        node_cache[:wsnl][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[\\s]')
      r0 = nil
    end

    node_cache[:wsnl][start_index] = r0

    r0
  end

  def _nt_ws
    start_index = index
    if node_cache[:ws].has_key?(index)
      cached = node_cache[:ws][index]
      if cached
        node_cache[:ws][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(@regexps[gr = '\A[ \\t]'] ||= Regexp.new(gr), :regexp, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[ \\t]')
      r0 = nil
    end

    node_cache[:ws][start_index] = r0

    r0
  end

  def _nt_nl
    start_index = index
    if node_cache[:nl].has_key?(index)
      cached = node_cache[:nl][index]
      if cached
        node_cache[:nl][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?("\r\n", false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure("\r\n")
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?("\r", false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure("\r")
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        if (match_len = has_terminal?("\n", false, index))
          r3 = instantiate_node(NewLineNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure("\n")
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:nl][start_index] = r0

    r0
  end

  def _nt_eof
    start_index = index
    if node_cache[:eof].has_key?(index)
      cached = node_cache[:eof][index]
      if cached
        node_cache[:eof][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if index < input_length
      r1 = true
      @index += 1
    else
      terminal_parse_failure("any character")
      r1 = nil
    end
    if r1
      r0 = nil
    else
      @index = i0
      r0 = instantiate_node(SyntaxNode,input, index...index)
    end

    node_cache[:eof][start_index] = r0

    r0
  end

end

class DracoonGrammarParser < Treetop::Runtime::CompiledParser
  include DracoonGrammar
end

